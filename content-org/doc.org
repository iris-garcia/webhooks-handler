#+STARTUP: content
#+AUTHOR: Iris Garcia
#+HUGO_BASE_DIR: ../
#+HUGO_AUTO_SET_LASTMOD: t
#+OPTIONS: toc:nil

#+macro: image [[https://iris-garcia.github.io/webhooks-handler/images/$1]]
#+macro: section [[https://iris-garcia.github.io/webhooks-handler/$1/][$2]]

* Homepage
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nocomment true :nodate true :nopaging true :noread true :chapter true
:EXPORT_HUGO_SECTION:
:EXPORT_HUGO_BUNDLE: /
:EXPORT_HUGO_WEIGHT: 1
:EXPORT_FILE_NAME: _index
:END:
<h1>Webhooks Handler</h1>
{{{image(webhooks_handler.png)}}}


{{% notice tip %}}
This site will host the documentation for Webhooks Handler.
{{% /notice %}}

* Sections
** How-to
:PROPERTIES:
:EXPORT_HUGO_SECTION: howto
:EXPORT_HUGO_WEIGHT: 2
:END:
*** How-to
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :chapter true
:END:
<h1>How to's Section</h1>
Table of contents:
- {{{section(howto/gh-pages,GitHub Pages)}}}
*** GitHub Pages                                              :ci:hugo:doc:
:PROPERTIES:
:EXPORT_HUGO_SECTION: howto/gh-pages
:EXPORT_HUGO_WEIGHT: 1
:END:
**** GitHub Pages
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :asciinema true
:END:
This document ilustrates how to setup [[https://pages.github.com/][GitHub Pages]] using [[https://gohugo.io/][Hugo]] as
website generator and [[https://github.com/features/actions][GitHub's Actions]] to automate the deployment
process.

There are different alternatives to setup GitHub pages, the one used
in here is a project pages using ~gh-pages~ branch, the advantages
are:
- It keeps your source and generated website in different branches and
  therefore maintains version control history for both.
- It uses the default Hugo's *public* folder.

So basically this project's repository has the following branches:
- *master*: Hosts the source code of the project.
- *hugo*: Hosts the source code of the documentation website.
- *gh-pages*: Hosts the static assets generates by hugo.

***** Step 1: Initializing branches
#+begin_src bash
# Hugo branch
git checkout -b hugo
echo "public" >> .gitignore
git add .gitignore
git commit -m "Adds .gitignore"
hugo new site .
git add .
git commit -m "Adds initial hugo site"
git push origin hugo

# gh-pages branch
git checkout --orphan gh-pages
git reset --hard
git commit --allow-empty -m "Initializing gh-pages branch"
git push origin gh-pages
#+end_src

***** Step 2: Generate a SSH key.
#+begin_src bash
ssh-keygen -t rsa -f hugo -q -N ""
#+end_src

{{% notice note %}}
This will generate the files: ~hugo~ and ~hugo.pub~ which will be
needed for the next steps.
{{% /notice %}}

***** Step 3: Add a deployment key
Navigate to your GitHub's repository settings and under *Deploy keys*
and add a new one using the content of the ~hugo~ SSH private key
generated in the previous step.


{{{image(deploy_key.png)}}}

{{% notice warning %}}
Make sure the *Allow write access* is checked, otherwise the GitHub's
Action won't be able to push changes.
{{% /notice %}}

***** Step 4: Add the GitHub's Action.
Create the needed directory in the *hugo* branch:
#+begin_src bash
git checkout hugo
mkdir -p .github/workflows
#+end_src

Add a new file in the path ~.github/workflows/gh_pages.yml~ with the
following content:

#+begin_src yaml :hl_lines 35
  name: gh_pages

  on:
    push:
      branches:
        - hugo

  jobs:
    build:

      runs-on: ubuntu-18.04

      steps:
      - uses: actions/checkout@v1
      - name: Installs hugo
        run: |
          cd /tmp
          wget https://github.com/gohugoio/hugo/releases/download/v0.57.0/hugo_0.57.0_Linux-64bit.deb
          sudo dpkg -i hugo_0.57.0_Linux-64bit.deb
          hugo version
      - name: Build hugo site
        run: |
          rm -rf public
          git worktree add -b gh-pages public origin/gh-pages
          hugo

      - name: Configure git and deployment key
        env:
          GITHUB_DEPLOY_KEY: ${{ secrets.GITHUB_DEPLOY_KEY }}
        run: |
          mkdir /home/runner/.ssh
          ssh-keyscan -t rsa github.com >/home/runner/.ssh/known_hosts
          echo "${GITHUB_DEPLOY_KEY}" > /home/runner/.ssh/id_rsa && \
          chmod 400 /home/runner/.ssh/id_rsa
          git remote set-url origin git@github.com:iris-garcia/webhooks-handler.git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Commit and push changes to gh-pages
        run: |
          cd public
          git add --all
          git commit -m "Publishing to gh-pages branch"
          cd ..
          git push origin gh-pages
#+end_src

{{% notice note %}}
Replace the origin's remote with your repository.
{{% /notice %}}

Finally commit and push the changes (which should trigger already the
Action).

#+begin_src bash
git add .github/workflows/gh_pages.yml
git commit -m "Adds GitHub's Action to build hugo site."
git push origin hugo
#+end_src

***** Step 5: Verify the Action
If everything went well you should already have your site updated and a
new commit to the ~gh-pages~ branch.

You can also see the output of the Action navigating to the *Actions*
section of your repository.

{{{image(gh_action.png)}}}


* Footnotes
[fn:1] Footnote example

* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (auto-fill-mode 1)
# End
